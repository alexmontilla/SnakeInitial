
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author victoralonso
 */
public class Board extends javax.swing.JPanel {
    
    public static final int INITIAL_DELTA_TIME = 600;
    private int numRows = 25;
    private int numCols = 25;
    private Snake snake;
    private Food food;
    private Food specialFood;
    private Timer snakeTimer;
    private Timer specialFoodTimer;
    private int deltaTime;
    private Node[][] playBoard;
    private javax.swing.Timer timer;


    /**
     * Creates new form Board
     */
    public Board() {
        initComponents();
        myInit();
    }
    
    private void myInit() {
        // Finish this method
        playBoard = new Node[numRows][numCols];
        deltaTime = INITIAL_DELTA_TIME;
         timer = new javax.swing.Timer(deltaTime, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(canMove(currentShape, currentRow+1, currentCol)) {
                    currentRow++;
                    newRepainter.repaint();
                } else {
                  
                    moveShapeToPlayBoard();
                    if(!canMove(currentShape, 1, NUM_COLS/2)) {
                    gameOver = true;
                    timer.stop();
                    }
                    if(!gameOver) {
                    checkFullRows();
                    
                    addNewShape();
                    record = scoreBoard.getScore();
                    Player p1 = new Player(getName(), record);    
                    }
                }
            }

            private void moveShapeToPlayBoard() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        
             
    }
    
    public Board(int numRows, int numCols) {
        // Finish this method
    }
    
    public boolean colideFood() {
        // Finish this method
        return false;
    }
    
    public void gameOver() {
        // Finish this method
    }
    
    @Override 
    protected void paintComponent(Graphics g)  {
        // Finish this method
        // Paint the Snake and the food here
    }
    private boolean canMove(Shape shape, int newRow, int newCol) {
        int leftBorder = newCol + shape.minX();
        int rigthBorder = newCol + shape.maxX();
        int bottomBorder = newRow + shape.maxY();
        int topBorder = newRow + shape.minY();
        if (leftBorder < 0 || rigthBorder >= numCols || bottomBorder >= numRows) {

            return false;
        }
            for (int i = 0; i < 4; i++) {
                int x = newCol + shape.getX(i);
                int y = newRow + shape.getY(i);

                if (y >= 0) {
                    if (playBoard[y][x] != Tetrominoes.NoShape) {
                        return false;
                    }
                }

            }
            return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
